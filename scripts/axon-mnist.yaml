apiVersion: myelinproj.io/v1alpha1
kind: Axon
metadata:
  name: spectral-net-mnist
spec:

  serviceAccountName: myelin-app-myelin

  artifacts:
    - name: spectral-net-source
      path: /src
      git:
        repo: https://github.com/myelinio/SpectralNet.git
        revision: master

  volumeClaimTemplate:
    metadata:
      name: axon-store30
    spec:
      storageClassName: nfs
      accessModes: ["ReadWriteMany"]
      resources:
        requests:
          storage: 5Gi
  
  tasks:
    - name: DataPrep
      container:
        image: registry-intl.eu-central-1.aliyuncs.com/myelinproj/data-preprocess:c4bdc2f
#        imageBuild:
#          repositoryName: data-preprocess
#          artifact: spectral-net-source
#          buildLocation: /src
#          dockerfile:
#            path: scripts/Dockerfile.data-preprocess
        env:
          - name: LD_LIBRARY_PATH
            value: /usr/local/nvidia/lib64:/usr/local/nvidia/bin
          - name: GPU
            value: "0"
          - name: GPU_MEMORY_FRACTION
            value: "0.9"
          - name: DATA_SET
            value: mnist

    - name: DataPrepAutoEncoder
      container:
        image: registry-intl.eu-central-1.aliyuncs.com/myelinproj/autoencoder-preprocess:c4bdc2f
#        imageBuild:
#          repositoryName: autoencoder-preprocess
#          artifact: spectral-net-source
#          buildLocation: /src
#          dockerfile:
#            path: scripts/Dockerfile.ae-preprocess
        env:
          - name: LD_LIBRARY_PATH
            value: /usr/local/nvidia/lib64:/usr/local/nvidia/bin
          - name: GPU
            value: "0"
          - name: GPU_MEMORY_FRACTION
            value: "0.9"
          - name: DATA_SET
            value: mnist

    - name: TrainAutoencoderModel
      train:
        image: registry-intl.eu-central-1.aliyuncs.com/myelinproj/autoencoder-train-gpu:c4bdc2f
#        imageBuild:
#          repositoryName: autoencoder-train-gpu
#          artifact: spectral-net-source
#          buildLocation: /src
#          dockerfile:
#            path: scripts/Dockerfile.ae-train-gpu
        env:
          - name: LD_LIBRARY_PATH
            value: /usr/local/nvidia/lib64:/usr/local/nvidia/bin
          - name: GPU
            value: "0"
          - name: GPU_MEMORY_FRACTION
            value: "0.50"
          - name: DATA_SET
            value: mnist

        nodeSelector:
          cloud.google.com/gke-accelerator: "nvidia-tesla-p4"
        resources:
          limits:
            nvidia.com/gpu: 1

    - name: DataPrepSiamese
      container:
        image: registry-intl.eu-central-1.aliyuncs.com/myelinproj/siamese-preprocess:c4bdc2f
#        imageBuild:
#          repositoryName: siamese-preprocess
#          artifact: spectral-net-source
#          buildLocation: /src
#          dockerfile:
#            path: scripts/Dockerfile.siamese-preprocess
        env:
          - name: LD_LIBRARY_PATH
            value: /usr/local/nvidia/lib64:/usr/local/nvidia/bin
          - name: GPU
            value: "0"
          - name: GPU_MEMORY_FRACTION
            value: "0.9"
          - name: DATA_SET
            value: mnist

        nodeSelector:
          cloud.google.com/gke-accelerator: "nvidia-tesla-p4"
        resources:
          requests:
            cpu: "2"
          limits:
            nvidia.com/gpu: 1

    - name: TrainSiameseModel
      train:
        image: registry-intl.eu-central-1.aliyuncs.com/myelinproj/siamese-train-gpu:c4bdc2f
#        imageBuild:
#          repositoryName: siamese-train-gpu
#          artifact: spectral-net-source
#          buildLocation: /src
#          dockerfile:
#            path: scripts/Dockerfile.siamese-train-gpu
        env:
          - name: LD_LIBRARY_PATH
            value: /usr/local/nvidia/lib64:/usr/local/nvidia/bin
          - name: GPU
            value: "0"
          - name: GPU_MEMORY_FRACTION
            value: "0.9"
          - name: DATA_SET
            value: mnist

        nodeSelector:
          cloud.google.com/gke-accelerator: "nvidia-tesla-p4"
        resources:
          limits:
            nvidia.com/gpu: 1

    - name: DataPrepSpectralNet
      container:
        image: registry-intl.eu-central-1.aliyuncs.com/myelinproj/spectral-net-preprocess:c4bdc2f
#        imageBuild:
#          repositoryName: spectral-net-preprocess
#          artifact: spectral-net-source
#          buildLocation: /src
#          dockerfile:
#            path: scripts/Dockerfile.spectral-preprocess
        env:
          - name: LD_LIBRARY_PATH
            value: /usr/local/nvidia/lib64:/usr/local/nvidia/bin
          - name: GPU
            value: "0"
          - name: GPU_MEMORY_FRACTION
            value: "0.9"
          - name: DATA_SET
            value: mnist

        nodeSelector:
          cloud.google.com/gke-accelerator: "nvidia-tesla-p4"
        resources:
          limits:
            nvidia.com/gpu: 1

    - name: TrainSpectralNetModel
      train:
        image: registry-intl.eu-central-1.aliyuncs.com/myelinproj/spectral-net-train-gpu:c4bdc2f
#        imageBuild:
#          repositoryName: spectral-net-train-gpu
#          artifact: spectral-net-source
#          buildLocation: /src
#          dockerfile:
#            path: scripts/Dockerfile.spectral-train-gpu
        env:
          - name: LD_LIBRARY_PATH
            value: /usr/local/nvidia/lib64:/usr/local/nvidia/bin
          - name: GPU
            value: "0"
          - name: GPU_MEMORY_FRACTION
            value: "0.9"
          - name: DATA_SET
            value: mnist

        nodeSelector:
          cloud.google.com/gke-accelerator: "nvidia-tesla-p4"
        resources:
          limits:
            nvidia.com/gpu: 1


    - name: DeploySpectralNetModel
      deploy:
#        image: registry-intl.eu-central-1.aliyuncs.com/myelinproj/spectral-net-deploy:c4bdc2f
        imageBuild:
          repositoryName: spectral-net-deploy
          artifact: spectral-net-source
          buildLocation: /src/src
          s2i:
            builderImage: docker.io/myelinio/myelin-deployer-s2i-cuda10-runtime-py3:v0.1.6
        env:
          - name: LD_LIBRARY_PATH
            value: /usr/local/cuda/lib64/:/usr/local/cuda-10.0/compat/:/usr/local/nvidia/lib64:/usr/local/nvidia/bin
          - name: GPU
            value: "0"
          - name: GPU_MEMORY_FRACTION
            value: "0.9"
          - name: DATA_SET
            value: mnist
        nodeSelector:
          cloud.google.com/gke-accelerator: "nvidia-tesla-p4"
        resources:
          limits:
            nvidia.com/gpu: 1
        endpointType: REST
        endpointRestType: Multipart

  sensors:
    - name: TrainModels
      triggers:
        - name: RestTrigger
          type: Rest
      tasks:
        - resourceExecutor:
            task: DataPrep
#        - resourceExecutor:
#            task: DataPrepAutoEncoder
#        - trainer:
#            task: TrainAutoencoderModel
        - resourceExecutor:
            task: DataPrepSiamese
        - trainer:
            task: TrainSiameseModel
        - resourceExecutor:
            task: DataPrepSpectralNet
        - trainer:
            task: TrainSpectralNetModel


    - name: DeploymentDecisionMaker
      triggers:
        - name: TestTrainingComplete
          type: Lifecycle
          condition: Succeeded
          task: TrainSpectralNetModel
      tasks:
        - deployer:
            name: deployer
            rolloutSpec:
              - destinations:
                  - destinationIndex: 0
                    weight: 50
                  - destinationIndex: 1
                    weight: 50
            replicas: 1
            models:
              - name: ClusteringModel
                modelSelectionStrategy: "best"
                routingStrategy:
                  - destinations:
                      - destinationName: spectralnet
                        weight: 100
                backendModels:
                  - name: spectralnet
                    trainer: TrainSpectralNetModel
                    deployer: DeploySpectralNetModel
                    modelSelectionStrategy: "best"
            routes:
              - path: /predict
                dag:
                  - model: ClusteringModel
                    path: /predict
              - path: /send-feedback
                dag:
                  - model: ClusteringModel
                    path: /send-feedback